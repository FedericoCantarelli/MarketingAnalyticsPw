save(data.transaction.new, file=("./data/dataset.Rdata"))
rm(list=ls())
load("./data/dataset.Rdata")
View(data.transaction.new)
rm(list = ls())
graphics.off()
library(pacman)
pacman::p_load("tidyverse", "ggplot2", "dplyr", "lubridate")
## Occhio che il dataset è molto pesante e potrebbe volerci un po' per
## caricarlo
data.transaction <- read.csv("./data/dataset.csv", sep = ',', dec = '.')
data.transaction$date_ticket <- format(data.transaction$date_ticket, scientific = F)
data.transaction$customer_id <- format(data.transaction$customer_id, scientific = F)
View(data.transaction)
summary(data.transaction)
nrow(data.transaction[!complete.cases(data.transaction),])
data.transaction$date_ticket <- parse_date_time(as.character(data.transaction$date_ticket), orders = c("%Y%m%d%H%M%S"))
if (!any(is.na(data.transaction))){print("Everything is ok.")}
summary(data.transaction)
data.transaction$store_id <- as.factor(data.transaction$store_id)
data.transaction$customer_id <- as.factor(data.transaction$customer_id)
data.transaction$product_code <- as.factor(data.transaction$product_code)
data.transaction$cashdesk_no <- as.factor(data.transaction$cashdesk_no)
summary(data.transaction)
# Analizziamo il problema degli other nell'attributo cash_no
cash_desk_no <- data.frame(t(table(data.transaction$cashdesk_no)))[-1]
colnames(cash_desk_no) <- c("cashdesk_id", "count")
cash_desk_no$cashdesk_id <- as.integer(cash_desk_no$cashdesk_id)
cash_desk_no[,"cum_sum"] <- cumsum(cash_desk_no$count)
cash_desk_no[,"perc"] <- cash_desk_no$cum_sum/sum(cash_desk_no$count)*100
View(cash_desk_no)
ggplot(data = cash_desk_no, mapping = aes(x = cashdesk_id, y = perc))+
geom_line() +
geom_point() +
geom_hline(aes(yintercept = 50), color = 'red', linetype = 'dashed') +
geom_hline(aes(yintercept = 75), color = 'blue', linetype = 'dotted') +
geom_hline(aes(yintercept = 90), color = 'darkgreen', linetype = 'twodash') +
geom_hline(aes(yintercept = 95), color = 'purple', linetype = 'dotdash')
nrow(data.transaction[data.transaction$quantity < 0, ])
nrow(data.transaction[data.transaction$price < 0, ])
index <- index(data.transaction[data.transaction$price < 0 || data.transaction$quantity < 0])
index <- rownames(data.transaction[data.transaction$price < 0 || data.transaction$quantity < 0])
dim(data.transaction)
index <- rownames(data.transaction[(data.transaction$price < 0) || (data.transaction$quantity < 0)])
dim(data.transaction)
index <- rownames(data.transaction[data.transaction$price < 0, ])
dim(data.transaction)
data.transaction.no.neg = data.transaction %>% filter(price >=0 | quantity >=0)
data.transaction.no.neg = data.transaction %>% filter(price >=0 | quantity >=0)
dim(data.transaction.no.neg)
dim(data.transaction)
data.transaction.no.neg[price <0,]
data.transaction.no.neg[data.transaction.no.neg$price <0,]
dim(data.transaction) - dim(data.transaction.no.neg)
rm(list = ls())
graphics.off()
library(pacman)
pacman::p_load("tidyverse", "ggplot2", "dplyr", "lubridate")
## Occhio che il dataset è molto pesante e potrebbe volerci un po' per
## caricarlo
data.transaction <- read.csv("./data/dataset.csv", sep = ',', dec = '.')
data.transaction$date_ticket <- format(data.transaction$date_ticket, scientific = F)
data.transaction$customer_id <- format(data.transaction$customer_id, scientific = F)
View(data.transaction)
int2 <- lubridate::interval(lubridate::ymd("2011-07-20"),
lubridate::ymd("2011-07-22"))
int2
day(int2)
difftime(ymd("2022-01-01", ymd("2022-01-02"), units = 'days')
)
rm(list = ls())
graphics.off()
library(pacman)
pacman::p_load("tidyverse", "ggplot2", "dplyr", "lubridate", "readxl",
"arules", "arulesViz", "rbokeh", "plotly", "zoo")
setwd("~/Documents/MarketingAnalyticsProject/code")
load("./data/arules_base.Rdata")
load("./data/arules_advanced.Rdata")
rules_found_base <- sort(apriori(basic.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=4),
by = "lift") # Sorting rules by lift
plot(rules_found_base, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_base, method = "two-key plot")
save(rules_found_base, file="./data/rules_found_base.Rdata")
inspect(head(rules_found_base,10))
inspect(tail(rules_found_base,10, by="lift"))
rules.2.order <- subset(rules_found_base, size(lhs)==1)
inspect(head(rules.2.order))
rules_found_base_highlight <- head(rules_found_base, 20)
plot(rules_found_base_highlight.rules, method="graph", control=list(type="items"),
engine = "htmlwidget")
rules_found_base_highlight <- head(rules_found_base, 20)
plot(rules_found_base_highlight, method="graph", control=list(type="items"),
engine = "htmlwidget")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = "lift") # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_base_advanced, method = "two-key plot")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = "lift") # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_advanced, method = "two-key plot")
inspect(head(rules_found_advanced, 10))
inspect(head(rules_found_advanced, 20))
inspect(head(rules_found_advanced, 20))
inspect(head(rules_found_advanced, 20))
inspect(head(rules_found_advanced, 15))
inspect(head(rules_found_advanced, 5))
setwd("~/Documents/MarketingAnalyticsProject/code")
load("./data/arules_advanced.Rdata")
library(pacman)
pacman::p_load("tidyverse", "ggplot2", "dplyr", "lubridate", "readxl",
"arules", "arulesViz", "rbokeh", "plotly", "zoo")
load("./data/arules_advanced.Rdata")
load("./data/arules_base.Rdata")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = "lift") # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_advanced, method = "two-key plot")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = c("support", "confidence")) # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_advanced, method = "two-key plot")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = c("support", "confidence")) # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "confidence"), shading = "lift")
plot(rules_found_advanced, method = "two-key plot")
rules_found_advanced_highlight <- head(rules_found_advanced, 20)
plot(rules_found_advanced_highlight, method="graph", control=list(type="items"),
engine = "htmlwidget")
load("./data/dataframe_finale.Rdata")
load("./data/RegFMR.Rdata")
arules.data <- left_join(RegFMR, data.transaction.positive, by = "customer_id")
# Parse dates
arules.data$date_ticket <-
parse_date_time(as.character(arules.data$date_ticket),
orders = c("%Y%m%d%H%M%S"))
trans_list <- arules.data %>% group_by(Key) %>%
summarise(items=list(description))
basic.rules <- as(trans_list$items, "transactions")
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(date_ticket, label=T,
abbr = T))
trans_list_advanced$weekday <- factor(trans_list_advanced$weekday,
levels = c("Mon", "Tue", "Wed",
"Thu", "Fri", "Sat",
"Sun"))
# Explore total expense
summary(trans_list_advanced$tot.expense)
options(scipen=999) # To remove scientific notation from the plot
hist(trans_list_advanced$tot.expense)
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0, 0.2, 0.4, 0.6, 0.8,))
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0, 0.2, 0.4, 0.6, 0.8))
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0.2, 0.4, 0.6, 0.8))
# Create discrete variable
trans_list_advanced$tot.expense <- cut(trans_list_advanced$tot.expense,
breaks = c(0, 6.79, 11.55, 17.71, 28.60, max(trans_list_advanced$tot.expense)),
labels = c("low ticket value", "medium-low ticket value", "medium ticket value", "medium-high ticket value", "high ticket value"),
right = FALSE, ordered_result=TRUE)
hist(trans_list_advanced$tot.expense)
barplot(trans_list_advanced$tot.expense)
ggplot(trans_list_advanced, aes(x=tot.expense)) +
geom_bar(stat = "identity")
trans_list_advanced$tot.expense <- as.factor(trans_list_advanced$tot.expense)
ggplot(trans_list_advanced, aes(x=tot.expense)) +
geom_bar(stat = "identity")
ggplot(trans_list_advanced, aes(x=tot.expense)) +
geom_bar()
ggplot(trans_list_advanced, aes(x=tot.expense)) +
geom_bar() + ggtitle("Discretized variable expenses")
ggplot(trans_list_advanced, aes(x=tot.expense)) +
geom_bar() + ggtitle("Discretized variable expenses") + theme(axis.text.x = element_text(angle = 90))
trans_list_advanced[!comple.cases(trans_list_advanced),]
trans_list_advanced[!complete.cases(trans_list_advanced),]
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(date_ticket, label=T,
abbr = T))
trans_list_advanced$weekday <- factor(trans_list_advanced$weekday,
levels = c("Mon", "Tue", "Wed",
"Thu", "Fri", "Sat",
"Sun"))
# Explore total expense
summary(trans_list_advanced$tot.expense)
options(scipen=999) # To remove scientific notation from the plot
hist(trans_list_advanced$tot.expense)
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0.2, 0.4, 0.6, 0.8))
View(trans_list_advanced)
trans_list_advanced[trans_list_advanced$Key=="6794996395804-20211221-181304-8101032-2",]
dim(trans_list_advanced)
n_distinct(trans_list_advanced$Key)
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(date_ticket, label=T,
abbr = T))
dim(trans_list_advanced)
arules.data <- left_join(RegFMR, data.transaction.positive, by = "customer_id")
# Parse dates
arules.data$date_ticket <-
parse_date_time(as.character(arules.data$date_ticket),
orders = c("%Y%m%d%H%M%S"))
trans_list <- arules.data %>% group_by(Key) %>%
summarise(items=list(description))
basic.rules <- as(trans_list$items, "transactions")
trans_list <- arules.data %>% group_by(Key) %>%
summarise(items=list(description))
basic.rules <- transactions(trans_list$items)
dim(trans_list)
n_distinct(trans_list$Key)
save(basic.rules, file="arules_base.Rdata")
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(date_ticket, label=T,
abbr = T))
dim(trans_list_advanced)
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste(description, sep = ", "),
tot.expense=sum(price),
weekday = wday(date_ticket, label=T,
abbr = T))
dim(trans_list_advanced)
View(trans_list_advanced)
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(date_ticket, label=T,
abbr = T))
View(trans_list_advanced)
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(unique(date_ticket), label=T,
abbr = T))
dim(trans_list_advanced)
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(unique(date_ticket), label=T,
abbr = T))
trans_list_advanced$weekday <- factor(trans_list_advanced$weekday,
levels = c("Mon", "Tue", "Wed",
"Thu", "Fri", "Sat",
"Sun"))
# Explore total expense
summary(trans_list_advanced$tot.expense)
options(scipen=999) # To remove scientific notation from the plot
hist(trans_list_advanced$tot.expense)
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0.2, 0.4, 0.6, 0.8))
# Create discrete variable
trans_list_advanced$tot.expense.cutted <- cut(trans_list_advanced$tot.expense,
breaks = c(0, 3.28, 5.98, 9.69, 16.23, max(trans_list_advanced$tot.expense)),
labels = c("low ticket value", "medium-low ticket value", "medium ticket value", "medium-high ticket value", "high ticket value"),
right = FALSE, ordered_result=TRUE)
trans_list_advanced$tot.expense.cutted <- as.factor(trans_list_advanced$tot.expense.cutted)
par(mar = c(8,4,1,1))
ggplot(trans_list_advanced, aes(x=tot.expense.cutted)) +
geom_bar() + ggtitle("Discretized variable expenses") + theme(axis.text.x = element_text(angle = 90))
trans_list_advanced[!complete.cases(trans_list_advanced),]
# Create discrete variable
trans_list_advanced$tot.expense.cutted <- cut(trans_list_advanced$tot.expense,
breaks = c(0, 3.28, 5.98, 9.69, 16.23, max(trans_list_advanced$tot.expense)),
labels = c("low ticket value", "medium-low ticket value", "medium ticket value", "medium-high ticket value", "high ticket value"),
right = TRUE, ordered_result=TRUE)
trans_list_advanced$tot.expense.cutted <- as.factor(trans_list_advanced$tot.expense.cutted)
par(mar = c(8,4,1,1))
ggplot(trans_list_advanced, aes(x=tot.expense.cutted)) +
geom_bar() + ggtitle("Discretized variable expenses") + theme(axis.text.x = element_text(angle = 90))
# Explore distribution divided by group
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted)
# Explore distribution divided by group
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="Ticket group")
# Explore distribution divided by group
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="Ticket group", ylab="Ticket nominal value")
# Explore distribution divided by group
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="Ticket group", ylab="Ticket nominal value", main="Boxplot for ticket value")
# Explore distribution divided by group
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="Ticket group", ylab="Ticket nominal value", main="Boxplot for Ticket Value")
# Explore distribution divided by group
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="Ticket group", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(8,4,1,1))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(8,4,1,1))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(10,4,1,1))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(12,4,1,1))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(11,4,1,1))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(11,4,3,1))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(11,4,3,1.5))
# Explore distribution divided by group
par(mar=c(11,4,3,1.5))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(11,4,3,5))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(11,4,3,0))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Explore distribution divided by group
par(mar=c(11,4,3,.3))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Frequency", type = "h")
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "bar")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "bar")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "h")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "b")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "h")
?plot
?plot
trans_list_advanced$final = paste(trans_list_advanced$RegFMR, trans_list_advanced$items_adv, trans_list_advanced$weekday, trans_list_advanced$tot.expense, sep = ", ")
trans_list_advanced$final = str_split(trans_list_advanced$final, ", ")
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(unique(date_ticket), label=T,
abbr = T))
trans_list_advanced$weekday <- factor(trans_list_advanced$weekday,
levels = c("Mon", "Tue", "Wed",
"Thu", "Fri", "Sat",
"Sun"))
# Explore total expense
summary(trans_list_advanced$tot.expense)
options(scipen=999) # To remove scientific notation from the plot
hist(trans_list_advanced$tot.expense)
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0.2, 0.4, 0.6, 0.8))
# Create discrete variable
trans_list_advanced$tot.expense.cutted <- cut(trans_list_advanced$tot.expense,
breaks = c(0, 3.28, 5.98, 9.69, 16.23, max(trans_list_advanced$tot.expense)),
labels = c("low ticket value", "medium-low ticket value", "medium ticket value", "medium-high ticket value", "high ticket value"),
right = TRUE, ordered_result=TRUE)
trans_list_advanced$tot.expense.cutted <- as.factor(trans_list_advanced$tot.expense.cutted)
par(mar = c(8,4,1,1))
ggplot(trans_list_advanced, aes(x=tot.expense.cutted)) +
geom_bar() + ggtitle("Discretized variable expenses") + theme(axis.text.x = element_text(angle = 90))
?ggtitle
# Explore distribution divided by group
par(mar=c(11,4,3,.3))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "h")
trans_list_advanced$final = paste(trans_list_advanced$RegFMR, trans_list_advanced$items_adv, trans_list_advanced$weekday, trans_list_advanced$tot.expense.cutted, sep = ", ")
trans_list_advanced$final = str_split(trans_list_advanced$final, ", ")
View(trans_list_advanced)
# Create advanced rules structure (with virtual items)
advanced.rules <-transactions(trans_list_advanced$final)
inspect(head(advanced.rules, 3))
# Create advanced rules structure (with virtual items)
advanced.rules <-transactions(trans_list_advanced$final)
inspect(head(advanced.rules, 2))
# Create advanced rules structure (with virtual items)
advanced.rules <-transactions(trans_list_advanced$final)
inspect(head(advanced.rules, 5))
save(advanced.rules, file = "arules_advanced.Rdata")
freq35= rev(tail(sort(itemFrequency(basic.rules)), 35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "First 35 items with higher support")
rules_found_base <- sort(apriori(basic.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=4),
by = "lift") # Sorting rules by lift
plot(rules_found_base, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_base, method = "two-key plot")
save(rules_found_base, file="./data/rules_found_base.Rdata")
inspect(head(rules_found_base,10))
inspect(tail(rules_found_base,10, by="lift"))
rules.2.order <- subset(rules_found_base, size(lhs)==1)
inspect(head(rules.2.order))
rules_found_base_highlight <- head(rules_found_base, 40)
plot(rules_found_base_highlight, method="graph", control=list(type="items"),
engine = "htmlwidget")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = c("support", "confidence")) # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "confidence"), shading = "lift")
plot(rules_found_advanced, method = "two-key plot")
freq35= rev(tail(sort(itemFrequency(basic.rules)), -35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "Last 35 items with higher support")
freq35= rev(head(sort(itemFrequency(basic.rules)), 35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "First 35 items with higher support")
freq35= rev(tail(sort(itemFrequency(basic.rules)), 35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "First 35 items with higher support")
freq35= rev(tail(sort(itemFrequency(basic.rules)), 35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "First 35 items with higher support")
freq35= rev(head(sort(itemFrequency(basic.rules)),35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "Last 35 items with higher support")
freq35= rev(head(sort(itemFrequency(basic.rules)),35))
par(mar=c(10,5,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "Last 35 items with higher support")
rules_found_base_highlight <- head(rules_found_base, 40)
plot(rules_found_base_highlight, method="graph", control=list(type="items"),
engine = "htmlwidget")
plot(head(rules_found_base, 20), method = "graph")
par(mar=c(1,1,1,1))
plot(head(rules_found_base, 20), method = "graph")
lenght(rules_found_base)
length(rules_found_base)
arules.data <- left_join(RegFMR, data.transaction.positive, by = "customer_id")
# Parse dates
arules.data$date_ticket <-
parse_date_time(as.character(arules.data$date_ticket),
orders = c("%Y%m%d%H%M%S"))
trans_list <- arules.data %>% group_by(Key) %>%
summarise(items=list(description))
basic.rules <- transactions(trans_list$items)
save(basic.rules, file="arules_base.Rdata")
load("./data/rules_found_base.Rdata")
rm(list=ls())
load("./data/dataframe_finale.Rdata")
load("./data/RegFMR.Rdata")
arules.data <- left_join(RegFMR, data.transaction.positive, by = "customer_id")
# Parse dates
arules.data$date_ticket <-
parse_date_time(as.character(arules.data$date_ticket),
orders = c("%Y%m%d%H%M%S"))
trans_list <- arules.data %>% group_by(Key) %>%
summarise(items=list(description))
basic.rules <- transactions(trans_list$items)
save(basic.rules, file="arules_base.Rdata")
trans_list_advanced <- arules.data %>% group_by(Key, RegFMR) %>% summarise(items_adv = paste0(description, collapse = ", "),
tot.expense=sum(price),
weekday = wday(unique(date_ticket), label=T,
abbr = T))
trans_list_advanced$weekday <- factor(trans_list_advanced$weekday,
levels = c("Mon", "Tue", "Wed",
"Thu", "Fri", "Sat",
"Sun"))
# Explore total expense
summary(trans_list_advanced$tot.expense)
options(scipen=999) # To remove scientific notation from the plot
hist(trans_list_advanced$tot.expense)
#Search percentiles for discretizing tot.expenses variables
quantile(trans_list_advanced$tot.expense, c(0.2, 0.4, 0.6, 0.8))
# Create discrete variable
trans_list_advanced$tot.expense.cutted <- cut(trans_list_advanced$tot.expense,
breaks = c(0, 3.28, 5.98, 9.69, 16.23, max(trans_list_advanced$tot.expense)),
labels = c("low ticket value", "medium-low ticket value", "medium ticket value", "medium-high ticket value", "high ticket value"),
right = TRUE, ordered_result=TRUE)
trans_list_advanced$tot.expense.cutted <- as.factor(trans_list_advanced$tot.expense.cutted)
par(mar = c(8,4,1,1))
ggplot(trans_list_advanced, aes(x=tot.expense.cutted)) +
geom_bar() + ggtitle("Discretized variable expenses", ) + theme(axis.text.x = element_text(angle = 90))
# Explore distribution divided by group
par(mar=c(11,4,3,.3))
boxplot(trans_list_advanced$tot.expense ~ trans_list_advanced$tot.expense.cutted, xlab="", ylab="Ticket nominal value (€)", las=2, main="Boxplot for Ticket Value")
# Eplore variable weekday
options(scipen=999) # To remove scientific notation from the plot
plot(table(trans_list_advanced$weekday), xlab = "Weekdays", ylab = "Count", type = "h")
trans_list_advanced$final = paste(trans_list_advanced$RegFMR, trans_list_advanced$items_adv, trans_list_advanced$weekday, trans_list_advanced$tot.expense.cutted, sep = ", ")
trans_list_advanced$final = str_split(trans_list_advanced$final, ", ")
# Create advanced rules structure (with virtual items)
advanced.rules <-transactions(trans_list_advanced$final)
inspect(head(advanced.rules, 5))
save(advanced.rules, file = "arules_advanced.Rdata")
freq35= rev(tail(sort(itemFrequency(basic.rules)), 35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "First 35 items with higher support")
freq35= rev(tail(sort(itemFrequency(basic.rules)), 35))
par(mar=c(10,4,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "First 35 items with higher support")
freq35= rev(head(sort(itemFrequency(basic.rules)),35))
par(mar=c(10,5,1,1))
barplot(freq35, las=2, cex.names=0.8, main = "Last 35 items with low support")
rules_found_base <- sort(apriori(basic.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=4),
by = "lift") # Sorting rules by lift
plot(rules_found_base, measure = c("support", "lift"), shading = "confidence")
plot(rules_found_base, method = "two-key plot")
save(rules_found_base, file="./data/rules_found_base.Rdata")
saveAsGraph(rules_found_base, file = "rules_base.graphml")
saveAsGraph(head(rules_found_base, 10, by="lift"), file = "rules_base.graphml")
saveAsGraph(rules_found_base, file = "rules_base.graphml")
rules_found_advanced <- sort(apriori(advanced.rules,
parameter=list(supp=0.001, conf=0.3), maxlen=8),
by = c("confidence")) # Sorting rules by lift
plot(rules_found_advanced, measure = c("support", "confidence"), shading = "lift")
plot(rules_found_advanced, method = "two-key plot")
rules_found_advanced_highlight <- head(rules_found_advanced, 20)
plot(rules_found_advanced_highlight, method="graph", control=list(type="items"),
engine = "htmlwidget")
saveAsGraph(rules_found_advanced, file = "rules_advanced.graphml")
